//
//  ListCharactersViewController.swift
//  RickMorty_CleanSwift
//
//  Created by Nithi Kulasiriswatdi on 4/8/2563 BE.
//  Copyright (c) 2563 Nithi Kulasiriswatdi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListCharactersDisplayLogic: class
{
  func displayFetchedCharacters(viewModel: ListCharacters.FetchCharacters.ViewModel)
  func displaySelectedSearchText(searchText:String)
}

class ListCharactersViewController: UIViewController, ListCharactersDisplayLogic
{
   
    
  var interactor: ListCharactersBusinessLogic?
  var router: (NSObjectProtocol & ListCharactersRoutingLogic & ListCharactersDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListCharactersInteractor()
    let presenter = ListCharactersPresenter()
    let router = ListCharactersRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
    if let vc = segue.destination as? SearchCharatersViewController{
        searchCharatersViewController = vc
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    removeSearchbarBorder()
    setupElement()
  }
    override func viewWillAppear(_ animated: Bool)
     {
       super.viewWillAppear(animated)
       fetchCharacters(searchText: nil)
     }
    
    @IBOutlet var collectionView: UICollectionView!
    
  // MARK: - Fetch orders
    
    var displayCharacters: [ListCharacters.FetchCharacters.ViewModel.DisplayedCharacter] = []
//    var displayedOrders: [ListCharactersModels.FetchOrders.ViewModel.DisplayedOrder] = []
    func fetchCharacters(searchText:String?){
        let request = ListCharacters.FetchCharacters.Request(name: searchText)
        interactor?.fetchCharacters(request: request)

    }
    func displayFetchedCharacters(viewModel: ListCharacters.FetchCharacters.ViewModel) {
        displayCharacters = viewModel.displayedCharacters
        self.collectionView.reloadData()
        
    }
    
  // MARK: Searching method
    @IBOutlet weak var characterSearchBar: UISearchBar!
    @IBOutlet weak var searchResultContainerView: UIView!
    var searchCharatersViewController:SearchCharatersViewController?
    
    
    func setupElement(){
       
   }
  func removeSearchbarBorder()
  {
    characterSearchBar.backgroundImage = UIImage()
    let textFieldInsideSearchBar = characterSearchBar.value(forKey: "searchField") as? UITextField
    textFieldInsideSearchBar?.textColor = UIColor.black
    textFieldInsideSearchBar?.leftViewMode = UITextField.ViewMode.never
    
  }
    func displaySelectedSearchText(searchText: String){
        self.characterSearchBar.text = searchText
        self.collectionView.reloadData()
        self.searchResultContainerView.isHidden = true
        self.characterSearchBar.resignFirstResponder()
        self.fetchCharacters(searchText: searchText)
    }

}
extension ListCharactersViewController:UICollectionViewDataSource,UICollectionViewDelegateFlowLayout{
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        return interactor?.getCellSize() ?? CGSize.zero
    }
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayCharacters.count
    }
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    
        let item = displayCharacters[indexPath.row]
        let cell  = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as! CharacterCell
        cell.updateUI(imageURL: item.imageURL)
        return cell
    }
}
extension ListCharactersViewController:UISearchBarDelegate{
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        searchBar.setShowsCancelButton(true, animated: true)
        self.searchResultContainerView.isHidden = false
    }
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        self.router?.routeToSearch(destinationVC: searchCharatersViewController!)
    }
    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
        searchBar.setShowsCancelButton(false, animated: true)
    }
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
        self.searchResultContainerView.isHidden = true
    }

}
